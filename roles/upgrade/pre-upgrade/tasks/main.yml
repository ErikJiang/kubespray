---
# Wait for upgrade
- name: Confirm node upgrade
  pause:
    echo: true
    prompt: "Ready to upgrade node? (Press Enter to continue or Ctrl+C for other options)"
  when:
    - upgrade_node_confirm

- name: Wait before upgrade node
  pause:
    seconds: "{{ upgrade_node_pause_seconds }}"
  when:
    - not upgrade_node_confirm
    - upgrade_node_pause_seconds != 0

# Node Ready: type = ready, status = True
# Node NotReady: type = ready, status = Unknown
- name: See if node is in ready state
  command: >
    {{ kubectl }} get node {{ kube_override_hostname | default(inventory_hostname) }}
    -o jsonpath='{ range .status.conditions[?(@.type == "Ready")].status }{ @ }{ end }'
  register: kubectl_node_ready
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  failed_when: false
  changed_when: false

# SchedulingDisabled: unschedulable = true
# else unschedulable key doesn't exist
- name: See if node is schedulable
  command: >
    {{ kubectl }} get node {{ kube_override_hostname | default(inventory_hostname) }}
    -o jsonpath='{ .spec.unschedulable }'
  register: kubectl_node_schedulable
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  failed_when: false
  changed_when: false

- name: Set if node needs cordoning
  set_fact:
    needs_cordoning: "{{ (kubectl_node_ready.stdout == 'True' and not kubectl_node_schedulable.stdout) or upgrade_node_always_cordon }}"

- name: Node draining
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  when:
    - needs_cordoning
  block:
    - name: Cordon node
      command: "{{ kubectl }} cordon {{ kube_override_hostname | default(inventory_hostname) }}"
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      changed_when: true

    - name: Drain node
      command: >-
        {{ kubectl }} drain
        --force
        --ignore-daemonsets
        --grace-period {{ drain_grace_period }}
        --timeout {{ drain_timeout }}
        --delete-emptydir-data {{ kube_override_hostname | default(inventory_hostname) }}
        {% if drain_pod_selector %}--pod-selector '{{ drain_pod_selector }}'{% endif %}
      when: drain_nodes
      register: result
      failed_when:
        - result.rc != 0
        - not drain_fallback_enabled
      until: result.rc == 0
      retries: "{{ drain_retries }}"
      delay: "{{ drain_retry_delay_seconds }}"

    - name: Drain node - fallback with disabled eviction
      when:
        - drain_nodes
        - drain_fallback_enabled
        - result.rc != 0
      command: >-
        {{ kubectl }} drain
        --force
        --ignore-daemonsets
        --grace-period {{ drain_fallback_grace_period }}
        --timeout {{ drain_fallback_timeout }}
        --delete-emptydir-data {{ kube_override_hostname | default(inventory_hostname) }}
        {% if drain_pod_selector %}--pod-selector '{{ drain_pod_selector }}'{% endif %}
        --disable-eviction
      register: drain_fallback_result
      until: drain_fallback_result.rc == 0
      retries: "{{ drain_fallback_retries }}"
      delay: "{{ drain_fallback_retry_delay_seconds }}"
      changed_when: drain_fallback_result.rc == 0

  rescue:
    - name: Set node back to schedulable
      command: "{{ kubectl }} uncordon {{ kube_override_hostname | default(inventory_hostname) }}"
      when: upgrade_node_uncordon_after_drain_failure
    - name: Fail after rescue
      fail:
        msg: "Failed to drain node {{ kube_override_hostname | default(inventory_hostname) }}"
      when: upgrade_node_fail_if_drain_fails

- name: Get etcd version using etcdctl
  command: "{{ bin_dir }}/etcdctl version"
  register: etcdctl_version_output
  changed_when: false
  check_mode: no
  delegate_to: "{{ groups['etcd'][0] }}"
  run_once: true

- name: Set etcd_installed_version fact from etcdctl output
  set_fact:
    etcd_installed_version: "{{ etcdctl_version_output.stdout | regex_search('etcdctl version: ([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
  when: etcdctl_version_output.stdout is defined

- name: Fail if etcd version is less than 3.5.20 for upgrade to 3.6.x
  fail:
    msg: "Current etcd version is {{ etcd_installed_version }}. Upgrading to etcd 3.6.x from a version lower than 3.5.20 is not recommended. Please upgrade to etcd 3.5.20 or newer first. See https://etcd.io/blog/2025/upgrade_from_3.5_to_3.6_issue/"
  when:
    - etcd_installed_version is defined
    - etcd_installed_version is version('3.5.20', '<')
    - etcd_version is version('3.6.0', '>=')
  run_once: true
